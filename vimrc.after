set colorcolumn=80
set wildignore+=*.pyc,*.db,env,user_media
map <Leader><TAB> :CtrlP<CR>
map <Leader>p :b#<CR>
map <F1> <ESC>

set novb
set noeb
let g:ackprg='ack-grep -H --nocolor --nogroup --column'

let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_python_checker='flake8'
let g:buffergator_display_regime='bufname'
let g:buffergator_sort_regime='mru'
let g:ctags_statusline=1
let g:ctags_title=1

set showcmd

inoremap jj <Esc>
nnoremap JJJJ <Nop>

set foldmethod=indent

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

nmap ; :

if has('gui_running')
    color tir_black
else
    set background=dark
endif

au filetype python hi Operator guifg=#FF0000 ctermfg=124
au filetype python let g:syntastic_check_on_open=1
au filetype javascript set sw=4 sts=4 ts=4 et
au filetype javascript let g:syntastic_check_on_open=1
au filetype haml set sw=4 sts=4 ts=4 et
" Prevent txt files from being treated as markdown
au BufRead *.txt set ft=


" XML formatter
function! DoFormatXML() range
  " Save the file type
  let l:origft = &ft

  " Clean the file type
  set ft=

  " Add fake initial tag (so we can process multiple top-level elements)
  exe ":let l:beforeFirstLine=" . a:firstline . "-1"
  if l:beforeFirstLine < 0
    let l:beforeFirstLine=0
  endif
  exe a:lastline . "put ='</PrettyXML>'"
  exe l:beforeFirstLine . "put ='<PrettyXML>'"
  exe ":let l:newLastLine=" . a:lastline . "+2"
  if l:newLastLine > line('$')
    let l:newLastLine=line('$')
  endif

  " Remove XML header
  exe ":" . a:firstline . "," . a:lastline . "s/<\?xml\\_.*\?>\\_s*//e"

  " Recalculate last line of the edited code
  let l:newLastLine=search('</PrettyXML>')

  " Execute external formatter
  exe ":silent " . a:firstline . "," . l:newLastLine . "!xmllint --noblanks --format --recover -"

  " Recalculate first and last lines of the edited code
  let l:newFirstLine=search('<PrettyXML>')
  let l:newLastLine=search('</PrettyXML>')

  " Get inner range
  let l:innerFirstLine=l:newFirstLine+1
  let l:innerLastLine=l:newLastLine-1

  " Remove extra unnecessary indentation
  exe ":silent " . l:innerFirstLine . "," . l:innerLastLine "s/^  //e"

  " Remove fake tag
  exe l:newLastLine . "d"
  exe l:newFirstLine . "d"

  " Put the cursor at the first line of the edited code
  exe ":" . l:newFirstLine

  " Restore the file type
  exe "set ft=" . l:origft
endfunction
command! -range=% FormatXML <line1>,<line2>call DoFormatXML()

nmap <silent> <leader>x :%FormatXML<CR>
vmap <silent> <leader>x :FormatXML<CR>
